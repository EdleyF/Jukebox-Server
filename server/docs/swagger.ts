import { ResponseCodes, formatJsonResponse } from 'server/utils'
import swaggerAutogen from 'swagger-autogen'

const outputFile = './docs/swagger_output.json'
const endpointsFiles = ['server/routes/router.ts']

swaggerAutogen({ openapi: '3.0.0' })

const doc = {
  info: {
    version: '1.0.0',
    title: 'Jukebox API',
    description: 'Documentation automatically generated by the <b>swagger-autogen</b> module.'
  },
  host: 'localhost:' + process.env.PORT,
  basePath: '/',
  schemes: ['http', 'https'],
  consumes: ['application/json'],
  produces: ['application/json'],
  tags: [
    {
      name: 'General',
      description: 'General endpoints'
    },
    {
      name: 'User',
      description: 'User management'
    },
    {
      name: 'Spotify',
      description: 'Communicate with Spotify'
    }
  ],
  components: {
    securitySchemes: {
      Bearer: {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
        in: 'header',
        description: 'Token used to authenticate with network.'
      }
    }
  },
  security: [
    {
      Bearer: []
    }
  ],
  definitions: {}
}
const generateResponseDocs = () => {
  const codes = ResponseCodes

  for (const codeStr of Object.keys(codes)) {
    const code = parseInt(codeStr)
    if (code > 299) {
      doc.definitions[`Error${code}`] = formatJsonResponse(code, 'Example message')
    } else {
      doc.definitions[`Success${code}`] = formatJsonResponse(code, 'Example message')
    }
  }
}

export const initializeSwagger = async () => {
  generateResponseDocs()
  return await swaggerAutogen()(outputFile, endpointsFiles, doc)
}
