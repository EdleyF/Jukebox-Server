import { BASE_URL } from 'server/config'
import type { IGroup } from 'server/models'
import { ResponseCodes, formatJsonResponse } from 'server/utils'
import swaggerAutogen from 'swagger-autogen'

const outputFile = './docs/swagger_output.json'
const endpointsFiles = ['server/routes/router.ts']

swaggerAutogen({ openapi: '3.0.0' })

const doc = {
  info: {
    version: '1.0.0',
    title: 'Jukebox API',
    description: 'Documentation automatically generated by the <b>swagger-autogen</b> module.'
  },
  host: BASE_URL.replace(/(http|https):\/\//, ''),
  basePath: '/',
  schemes: ['http', 'https'],
  consumes: ['application/json'],
  produces: ['application/json'],
  tags: [
    {
      name: 'General',
      description: 'General endpoints'
    },
    {
      name: 'User',
      description: 'User management'
    },
    {
      name: 'Spotify',
      description: 'Communicate with Spotify'
    }
  ],
  components: {},
  securityDefinitions: {
    Bearer: {
      type: 'apiKey',
      name: 'Authorization',
      in: 'header',
      description: 'The token for authentication into system.'
    }
  },
  definitions: {
    Group: { name: '', ownerId: '' } as IGroup
  }
}
const generateResponseDocs = () => {
  const codes = ResponseCodes

  for (const codeStr of Object.keys(codes)) {
    const code = parseInt(codeStr)
    if (code > 299) {
      doc.definitions[`Error${code}`] = formatJsonResponse(code, 'Example message')
    } else {
      doc.definitions[`Success${code}`] = formatJsonResponse(code, 'Example message')
    }
  }
}

export const initializeSwagger = async () => {
  generateResponseDocs()
  return await swaggerAutogen()(outputFile, endpointsFiles, doc)
}
